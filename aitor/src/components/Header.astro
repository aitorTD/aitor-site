---
// Modern minimalist header component
const navItems = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About" },
  { href: "/projects", label: "Projects" },
  { href: "/contact", label: "Contact" }
];
---

<header class="fixed w-full top-0 z-50 transition-all duration-500" id="site-header">
  <div class="container mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo with subtle animation -->
      <a href="/" class="logo-link relative group flex items-center">
        <img src="/images/logo.svg" alt="Aitor Logo" class="logo-image mr-2" width="36" height="36" />
        <span class="text-white text-2xl font-light tracking-wider">
          <!-- <span class="font-medium">A</span>itor -->
        </span>
        <span class="logo-underline"></span>
      </a>
      
      <!-- Minimal navigation -->
      <nav class="hidden md:block">
        <ul class="flex space-x-8">
          {navItems.map((item) => (
            <li>
              <a href={item.href} class="nav-link text-sm uppercase tracking-widest text-gray-300 hover:text-white transition-colors duration-300">
                {item.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>
      
      <!-- Mobile menu button -->
      <button class="mobile-menu-button md:hidden text-white focus:outline-none" aria-label="Toggle menu">
        <div class="hamburger">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </button>
    </div>
  </div>
  
  <!-- Mobile menu (hidden by default) -->
  <div class="mobile-menu hidden md:hidden">
    <div class="container mx-auto px-6 py-4">
      <ul class="space-y-4">
        {navItems.map((item) => (
          <li>
            <a href={item.href} class="block text-gray-300 hover:text-white py-2 transition-colors duration-300">
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<style>
  /* Header background with glass effect */
  #site-header {
    background-color: rgba(5, 10, 36, 0.2);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--color-primary-light, rgba(144, 176, 131, 0.2));  /* Use CSS variable */
    transform: translateY(0);
  }
  
  /* Logo styling */
  .logo-image {
    transition: transform 0.3s ease;
    filter: drop-shadow(0 0 4px var(--color-primary-light, rgba(144, 176, 131, 0.4)));
  }
  
  .logo-link:hover .logo-image {
    transform: rotate(10deg) scale(1.1);
  }
  
  /* Header scroll animation */
  #site-header.scrolled {
    background-color: rgba(5, 10, 36, 0.6);
    transform: translateY(-100%);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }
  
  #site-header.visible {
    transform: translateY(0);
  }
  
  /* Logo underline animation */
  .logo-link {
    display: inline-block;
    overflow: hidden;
  }
  
  .logo-underline {
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.7), transparent);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }
  
  .logo-link:hover .logo-underline {
    transform: translateX(100%);
  }
  
  /* Rest of the styles remain unchanged */
</style>

<script>
  // Header scroll behavior
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('site-header');
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    let lastScrollY = window.scrollY;
    
    // Mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenuButton.classList.toggle('active');
        mobileMenu.classList.toggle('active');
        mobileMenu.classList.toggle('hidden');
      });
    }
    
    // Scroll behavior
    window.addEventListener('scroll', () => {
      if (!header) return;
      
      const currentScrollY = window.scrollY;
      
      // Add scrolled class when scrolling down
      if (currentScrollY > 50) {
        header.classList.add('scrolled');
        
        // Show header when scrolling up, hide when scrolling down
        if (currentScrollY < lastScrollY) {
          header.classList.add('visible');
        } else {
          header.classList.remove('visible');
        }
      } else {
        header.classList.remove('scrolled');
        header.classList.remove('visible');
      }
      
      lastScrollY = currentScrollY;
    });
    
    // Listen for theme changes
    document.addEventListener('themeChanged', (event) => {
      if (!(event as CustomEvent).detail) return;
      
      // Update custom properties if needed
      if ((event as CustomEvent).detail?.primaryLight) {
        document.documentElement.style.setProperty('--color-primary-light', (event as CustomEvent).detail.primaryLight);
      }
      
      if ((event as CustomEvent).detail?.primaryMedium) {
        document.documentElement.style.setProperty('--color-primary-medium', (event as CustomEvent).detail.primaryMedium);
      }
    });
  });
</script>